// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstname     String
  lastname      String
  email         String         @unique
  password      String
  avatar        String?
  phonenumber   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Relations
  codeTemplates CodeTemplate[]
  blogPosts     BlogPost[]
  comments      Comment[]
  reports       Report[]
}

model CodeTemplate {
  id          Int        @id @default(autoincrement())
  title       String
  explanation String
  tags        String
  code        String
  language    String
  isForked    Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Relations
  blogPosts   BlogPost[]
}

model BlogPost {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  content     String
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  codeTemplates CodeTemplate[] // Blog post can reference multiple code templates
  comments      Comment[]
  ratings       Rating[]
  Report        Report[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  blogPost        BlogPost  @relation(fields: [blogPostId], references: [id])
  blogPostId      Int
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  replies         Comment[] @relation("CommentReplies")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Report {
  id          Int      @id @default(autoincrement())
  reason      String
  explanation String
  reporterId  Int
  ContentId   Int
  createdAt   DateTime @default(now())

  user User[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  Int?
}
