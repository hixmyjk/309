generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  avatar      String? // Optional field
  phoneNumber String? // Optional field
  role        String   @default("USER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  codeTemplates CodeTemplate[]
  blogPosts     BlogPost[]
  comments      Comment[]
  reports       Report[]
  rating        Rating[]
}

model CodeTemplate {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  code        String
  language    String // E.g., "Python", "Java", "C++"
  tags        String // Store tags as a comma-separated string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Forking a template from another template
  forkedFrom      CodeTemplate?  @relation("ForkedFrom", fields: [forkedFromId], references: [id])
  forkedTemplates CodeTemplate[] @relation("ForkedFrom") // Templates that were forked from this one
  forkedFromId    Int?
  BlogPost        BlogPost?      @relation(fields: [blogPostId], references: [id])
  blogPostId      Int?
}

model BlogPost {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  content     String
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  codeTemplates CodeTemplate[] // Blog post can reference multiple code templates
  comments      Comment[]
  ratings       Rating[]
  Report        Report[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User     @relation(fields: [userId], references: [id])
  userId Int
  post   BlogPost @relation(fields: [postId], references: [id])
  postId Int
  Report Report[]
  rating Rating[]

  //self-relation for replies
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int? //nullable if it is not a reply
  replies         Comment[] @relation("CommentReplies") //related comments (replies
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id]) // Optional if the report is for a comment
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id]) // Optional if the report is for a blog post
  commentId  Int?
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  Int?
}
